#include <stdio.h>
#define SIZE 2
#define MOD 26
int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) return x;
    }
    return -1;
}
void matrixInverse(const int mat[SIZE][SIZE], int inv[SIZE][SIZE]) {
    int det = (mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0]) % MOD;
    det = (det + MOD) % MOD;
    int invDet = modInverse(det, MOD);
    inv[0][0] = (mat[1][1] * invDet) % MOD;
    inv[0][1] = (-mat[0][1] * invDet) % MOD;
    inv[1][0] = (-mat[1][0] * invDet) % MOD;
    inv[1][1] = (mat[0][0] * invDet) % MOD;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            inv[i][j] = (inv[i][j] + MOD) % MOD;
        }
    }
}
void computeKeyMatrix(const int pt[SIZE][SIZE], const int ct[SIZE][SIZE], int key[SIZE][SIZE]) {
    int ptInv[SIZE][SIZE];
    matrixInverse(pt, ptInv);
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            key[i][j] = 0;
            for (int k = 0; k < SIZE; k++) {
                key[i][j] = (key[i][j] + ct[i][k] * ptInv[k][j]) % MOD;
            }
        }
    }
}
int main() {
    int pt[SIZE][SIZE] = {{1, 2}, {3, 4}}; 
    int ct[SIZE][SIZE] = {{5, 6}, {7, 8}};
    int key[SIZE][SIZE];
    computeKeyMatrix(pt, ct, key);
    printf("Key Matrix:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d ", key[i][j]);
        }
        printf("\n");
    }
    return 0;
}

OUTPUT:
Key Matrix:
24 4
22 6
